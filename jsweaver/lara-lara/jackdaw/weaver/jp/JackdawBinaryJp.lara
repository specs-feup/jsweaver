import weaver.jp.BinaryJp;
import weaver.Weaver;

_lara_dummy_ = Object.defineProperty(BinaryJp.prototype, 'kind', {
	get: function () {
		return this.astNode.get("operator").getAsString();
	}
});

_lara_dummy_ = Object.defineProperty(BinaryJp.prototype, 'isLogicOp', {
	get: function () { 
		var kind = this.kind;
		return kind === '&&' || kind === '||'; 
	}
});

_lara_dummy_ = Object.defineProperty(BinaryJp.prototype, 'isInnerExpr', {
	get: function () {
		var parent = this.parent;
		
		if(parent !== null && parent.instanceOf('expr'))
			return true;

		return false;    

	}
});

_lara_dummy_ = Object.defineProperty(BinaryJp.prototype, 'outerExpr', {
	get: function () {
		var parent = this.parent;

		if(parent !== null && parent.instanceOf('expr'))
			return parent;

		return null;    
	}
});
