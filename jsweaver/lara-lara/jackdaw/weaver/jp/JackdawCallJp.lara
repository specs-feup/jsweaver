import weaver.jp.CallJp;
import weaver.Weaver;

_lara_dummy_ = Object.defineProperty(CallJp.prototype, 'name', {
	get: function () {  
	
		return CallJp._getName(this.astNode);
	/*
		var callee = Ast.toWeaverJoinPoint(this.astNode).callee;

	println(Ast.toWeaverJoinPoint(this.astNode).joinPointType);
		
		
		if(callee.instanceOf("identifier")) {
				return callee.name;
		}

		if(callee.instanceOf("memberExpression")) {
				return callee.property.name;
		}
		
		println("CallJp.name: Not implemented for callees which Jackdaw join points are of type '"+callee.joinPointType+"'");
		return undefined;
		*/
/*		
		println("Callee: " + Ast.toWeaverJoinPoint(this.astNode).callee.joinPointType);
		println("Callee Name: " + Ast.toWeaverJoinPoint(this.astNode).callee.name);
		println("Callee Object: " + Ast.toWeaverJoinPoint(this.astNode).callee.object.joinPointType);		

//		println("Name: " + weaverJp.name);
		var name = this.astNode.get("callee").get("name");
		if(name === null) {
			println("NAME IS NULL! " + this.astNode);
			println("Code: " + this.astNode.code);			
		}
		return this.astNode.get("callee").get("name").getAsString();
*/
	}
});

_lara_dummy_ = Object.defineProperty(CallJp.prototype, 'function', {
	get: function () {
		return Query.search("function",this.name).first();
	}
});

/**
 * Implements 'name', when its a memberExpression, returns the 
 */
 
CallJp._getName = function(astNode) {

		var callJp = Ast.toWeaverJoinPoint(astNode);

		if(callJp.instanceOf("identifier")) {
				return callJp.name;
		}

		if(callJp.instanceOf("memberExpression")) {
				return callJp.property.name;
		}
		
		if(callJp.instanceOf("callExpression")) {
			return CallJp._getName(callJp.callee.getNode());
		}


}
