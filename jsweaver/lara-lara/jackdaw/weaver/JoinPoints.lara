import weaver.JoinPointsBase;
import jackdaw._JackdawAspects;


/**
 * 
 * @return {$jp[]} the children of the given node
 */
JoinPoints.prototype._all_children = function($jp) {
	return $jp.children;
}


/**
 * 
 * @return {$jp[]} the descendants of the given node
 */
JoinPoints.prototype._all_descendants = function($jp) {
	return $jp.descendants;
}

/**
 * 
 * @return {$jp[]} all the nodes that are inside the scope of a given node
 */
JoinPoints.prototype._all_scope_nodes = function($jp) {
	throw "JoinPoints._all_scope_nodes not implemented yet";
}

/**
 * 
 * @return {$jp} the current root node of the AST
 */
/*
JoinPoints.prototype.root = function() {
	var rootOutput = call GetRoot();
	return rootOutput.rootJp;
}
*/

/**
 * 
 * @return {$jp[]} the children of the given node
 */
 /*
JoinPoints.prototype.children = function($jp,jpType) {
	var unfilteredJps = $jp.children;
	if(jpType == undefined){
		return unfilteredJps;
	}
	else{
		return this._filterNodes(unfilteredJps,jpType);
	}
}
*/




/**
 * 
 * @return {$jp[]} the descendants of the given node
 */
 /*
JoinPoints.prototype.descendants = function($jp,jpType) {
	var unfilteredJps = $jp.descendants;
	if(jpType == undefined){
		return unfilteredJps;
	}
	else{
		return this._filterNodes(unfilteredJps,jpType);
	}
}

JoinPoints.prototype._filterNodes = function($jps, jpType) {

	var filteredJps = [];
	
	for(var $jp of $jps) {
		if($jp.instanceOf(jpType)) {
	 //	if($jp.type == jpType) {
          	filteredJps.push($jp);
        }
	}
	
	return filteredJps;

}
*/